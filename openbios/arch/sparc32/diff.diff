--- entry.S	2020-06-07 01:20:02.433649583 +0200
+++ entry.Spre	2020-04-29 23:55:51.000000000 +0200
@@ -29,10 +29,11 @@
 #define PHYS_SS1000_SBI         0x02800000
 #define SER_ADDR1000            0x00200004
 
-#define ASI_CACHE_FLUSH_COMBINED_ALL 0x15
-
 #define WRITE_PAUSE    nop; nop; nop; /* Have to do this after %wim/%psr chg */
 
+
+#define RAMSIZE 0x7e00000 // 126M
+
         .globl	entry, _entry
 
 	.section ".text", "ax"
@@ -81,23 +82,11 @@ entry:
         /* Switch to our main context.
          * Main context is statically defined in C.
          */
+
         ! Check signature "QEMU"
 #ifdef CONFIG_TACUS
-        ! Get RAM SIZE
-        ! MMU Register Dxx : SYSCONF[31:20] & x"00000"
-        set     0xd00,%g1
-        lda     [%g1] ASI_M_MMUREGS, %g1
-        srl     %g1,20,%g1
-        sll     %g1,20,%g1
-
-        ! Get CPU number
-        ! MMU Register 0xx : Control Register [3:2]
-        lda     [%g0] ASI_M_MMUREGS, %g7
-        srl     %g7, 2, %g7
-        and     %g7, 3, %g7
-        
-        sta     %g0, [%g0] ASI_M_BYPASS ! [0000] = 0000
-        
+        ! RAM SIZE
+        set RAMSIZE,%g1
 #else
         set     CFG_ADDR, %g5
         mov     FW_CFG_SIGNATURE, %g2
@@ -140,18 +129,7 @@ entry:
         sll     %g3, 24, %g3
         or      %g3, %g4, %g1
         ! %g1 contains end of memory
-        
-        ! Get CPU number
-        ! XXX: not all CPUs should have MXCC
-        set     0x1c00f00, %g2
-        ldda    [%g2] ASI_CONTROL, %g2
-        srl     %g3, 24, %g7
-        subcc   %g7, 8, %g7
 
-        ! Only the first CPU clears memory
-        bnz     clear_done
-         nop
-        
         ! Get kernel address from configuration device
         ! NB: little endian format
         mov     FW_CFG_KERNEL_ADDR, %g2
@@ -195,6 +173,27 @@ clear_done:
         set     0x2000, %g3
         sub     %g1, %g3, %g6
 
+        ! Check if this is the boot CPU and skip SMP table check if yes
+        ! XXX: not all CPUs should have MXCC
+#ifdef CONFIG_TACUS
+        set     0, %g7
+#else
+        set     0x1c00f00, %g2
+        ldda    [%g2] ASI_CONTROL, %g2
+        srl     %g3, 24, %g7
+        sub     %g7, 8, %g7
+#endif
+        tst     %g7
+        bz      skip_table
+         nop
+
+        ! Calculate SMP table location
+	set	0x1f0c, %g2
+        add     %g6, %g2, %g2                 ! valid?
+        lda     [%g2] ASI_M_BYPASS, %g7
+        sta     %g0, [%g2] ASI_M_BYPASS
+
+skip_table:
         ! Get machine ID from configuration device
 #ifndef CONFIG_TACUS
         mov     FW_CFG_MACHINE_ID, %g2
@@ -230,147 +229,59 @@ clear_done:
         blu     ss2
          nop
 
-        ! Ok, this is SS-5, uniprocessor
-        ba      first_cpu
-         nop
- 
-ss10:
-        ! Ok, this is SS-10/20 or SS-600MP
+        ! Ok, this is SS-5
 
         tst     %g7
         bz      first_cpu
          nop
-         
-         
-#ifdef CONFIG_TACUS
-        ! get memory size
-        set     0xd00,%g1
-        lda     [%g1] ASI_M_MMUREGS, %g1
-        srl     %g1,20,%g1
-        sll     %g1,20,%g1                   ! G1 = MEM SIZE
-        
-        ! Set   MMU registers
-        set     0x2000, %g3
-        sub     %g1, %g3, %g7               ! ctx table at s+0x0
-        set     AC_M_CTPR, %g2
-        srl     %g7, 4, %g7
-        sta     %g7, [%g2] ASI_M_MMUREGS	! set ctx table ptr
-        set     AC_M_CXR, %g2
-        sta     %g0, [%g2] ASI_M_MMUREGS	! context 0
-        
-        ! Flush cache
-        set 0,%g2
-        //  16K
-        set 0x4000,%g3
-loopflush_mp:
-        sta    %g0, [%g2] ASI_CACHE_FLUSH_COMBINED_ALL
-        sta    %g0, [%g2] ASI_M_TXTC_TAG
-        sta    %g0, [%g2] ASI_M_DATAC_TAG
-        cmp  %g2,%g3
-        bne  loopflush_mp
-         add  %g2,4,%g2
-        nop
-        
-        ! Wait for end of CPU0 initialisation
-        set     0xFFFE0000, %g5
-        set     0xdadad0d0, %g6
-waitinit:
-        udiv    %g5,%g5,%g0
-        udiv    %g5,%g5,%g0
-        udiv    %g5,%g5,%g0
-        udiv    %g5,%g5,%g0
-        lda     [%g0] ASI_M_BYPASS, %g3
-        cmp     %g3,%g6
-        bne     waitinit
-         nop
-        
-        ! Jump to protected mode
-        set     highmom_mp - 0x0fd00000 , %g2
-        
-        /* MMU enable */
-        set 0x001 , %g3 // XCE=1, DCE=0, ICE=0 ,MMU_EN=1, BootMode=0, NoFault=0
-        
-        jmp     %g2
-         nop
-        nop
-        nop
-highmom_mp:
-        nop
-        nop
-        nop
-        sta    %g3, [%g0] ASI_M_MMUREGS	! enable mmu
-        nop
-        nop
-        nop
-        set     highmem_mp , %g2
-        jmp %g2
-         nop
-        nop
-highmem_mp:
-        nop
-        nop
-        
-        ! Wait for an softint to awake secondary CPUs
-        set     PHYS_SS10_INTR0, %g3
-        sll     %g7, 12, %g2
-        add     %g3, %g2, %g2
-        set     0, %g6
-        set     0xFFFE0000, %g5
-waiting:	
-        inc     %g6
-        udiv    %g5,%g5,%g0
-        udiv    %g5,%g5,%g0
-        udiv    %g5,%g5,%g0
-        udiv    %g5,%g5,%g0
-        cmp     %g6, 20
-        bl      waiting
-         nop
-        set     0, %g6
-        lda     [%g2] ASI_M_CTL, %g3            ! read pending softints
-        btst    %g3,%g5
-        bz      waiting
-         nop
-#endif
-        
+
         ! Clear softints used for SMP CPU startup
-        set     PHYS_SS10_INTR0 + 0x04, %g3
-        sll     %g7, 12, %g2
-        add     %g3, %g2, %g2
-        set     0xffffffff, %g3
-        sta     %g3, [%g2] ASI_M_CTL         ! clear softints
+        set     PHYS_JJ_INTR0 + 0x04, %g1
+        sll     %g2, 12, %g2
+        add     %g1, %g2, %g2
+        set     0xffffffff, %g1
+        sta     %g1, [%g2] ASI_M_BYPASS         ! clear softints
         add     %g2, 4, %g2
-        sta     %g0, [%g2] ASI_M_CTL         ! clear softints
-        
-        ! Get start of private memory in %g6
-        set     0x2000, %g2
-        sub     %g1, %g2, %g6
-        
+        sta     %g0, [%g2] ASI_M_BYPASS         ! clear softints
+
+load_ctx:
         ! SMP init, jump to user specified address
-        set	0x1f04, %g5
+	set	0x1f04, %g5
         add     %g6, %g5, %g5                 ! ctxtbl
         lda     [%g5] ASI_M_BYPASS, %g2
         sta     %g0, [%g5] ASI_M_BYPASS
-        set     AC_M_CTPR, %g3
-        sta     %g2, [%g3] ASI_M_MMUREGS        ! set ctx table ptr
-        set	0x1f00, %g5
+        set     AC_M_CTPR, %g1
+        sta     %g2, [%g1] ASI_M_MMUREGS        ! set ctx table ptr
+	set	0x1f00, %g5
         add     %g6, %g5, %g5                 ! ctx
         lda     [%g5] ASI_M_BYPASS, %g2
         sta     %g0, [%g5] ASI_M_BYPASS
-        set     AC_M_CXR, %g3
-        sta     %g2, [%g3] ASI_M_MMUREGS        ! set context
-        set	0x1f08, %g5
+        set     AC_M_CXR, %g1
+        sta     %g2, [%g1] ASI_M_MMUREGS        ! set context
+	set	0x1f08, %g5
         add     %g6, %g5, %g5                 ! entry
         lda     [%g5] ASI_M_BYPASS, %g2
         sta     %g0, [%g5] ASI_M_BYPASS
+        set     1, %g1
+        jmp     %g2                             ! jump to kernel
+         sta    %g1, [%g0] ASI_M_MMUREGS        ! enable mmu
 
-        set 0x001 , %g3 // XCE=1, DCE=0, ICE=0 ,MMU_EN=1, BootMode=0, NoFault=0
-        sta    %g3, [%g0] ASI_M_MMUREGS	    ! configure mmu
-        nop
-        nop
-        nop
-        jmp %g2        ! jump to kernel
+ss10:
+        ! Ok, this is SS-10 or SS-600MP
+        tst     %g7
+        bz      first_cpu
          nop
 
+        ! Clear softints used for SMP CPU startup
+        set     PHYS_SS10_INTR0 + 0x04, %g1
+        sll     %g2, 12, %g2
+        add     %g1, %g2, %g2
+        set     0xffffffff, %g1
+        sta     %g1, [%g2] ASI_M_CTL            ! clear softints
+        add     %g2, 4, %g2
+        b       load_ctx
+         sta    %g0, [%g2] ASI_M_CTL            ! clear softints
+
 ss2:
         ! Ok, this is SS-2
         set     ss2_error, %o2
@@ -385,7 +296,7 @@ ss1000:
 
 first_cpu:
         /* Create temporary page tables and map the ROM area to end of
-        RAM. This will be done properly in iommu.c later. */
+	RAM. This will be done properly in iommu.c later. */
         ! Calculate start of page tables etc. to %g6
         set     0x2000, %g4
         sub     %g1, %g4, %g6                   ! start of private memory
@@ -470,7 +381,7 @@ first_cpu:
       add	%g2, 0xa00-0x9ec, %g2		! s+0xa00
 
         /* Use end of ram for code, rodata, data, and bss
-        sections. SunOS wants to write to trap table... */
+	sections. SunOS wants to write to trap table... */
 #ifndef CONFIG_TACUS
         set	_end, %g6
         set	_start, %g4
@@ -551,6 +462,7 @@ loopflush:
         nop
         
         set     highmom - 0x0fd00000 , %g2
+        set	1, %g1
         
         /* MMU enable */
         set 0x001 , %g1 // XCE=1, DCE=0, ICE=0 ,MMU_EN=1, BootMode=0, NoFault=0
@@ -575,20 +487,15 @@ highmem:
         nop
         nop
         nop
-        set     0xd00,%g1
-        lda     [%g1] ASI_M_MMUREGS, %g1
-        srl     %g1,20,%g1
-        sll     %g1,20,%g1 // G1=RAMSIZE
-        sub     %g1,0x1700,%g1
-        sta     %g0, [%g1] ASI_M_BYPASS
-        add     %g1,0x400,%g1
-        sta     %g0, [%g1] ASI_M_FLUSH_PROBE
-      
+        set RAMSIZE - 0x1700, %g1
+        sta	%g0, [%g1] ASI_M_BYPASS
+        add %g1,0x400,%g1
+        sta	%g0, [%g1] ASI_M_FLUSH_PROBE
+        
         nop
         nop
         /* RAZ zone mem pour NextSTEP */
         nop
-        /*
         set 0,%g1
         set 0x6800000, %o0
         set  0x800000, %g2
@@ -596,11 +503,7 @@ zz600000:
         stda %g0, [%o0] ASI_M_BYPASS
         subcc %g2,8,%g2
         bne zz600000
-        add %o0,8,%o0
-        */
-        
-        set   0xdadad0d0,%g1
-        sta   %g1, [%g0] ASI_M_BYPASS
+         add %o0,8,%o0
         
 #endif
         /*
@@ -694,16 +597,18 @@ zz600000:
         PATCH_INSN(fnwin_patch1_7win, fnwin_patch1)
         PATCH_INSN(fnwin_patch2_7win, fnwin_patch2)
         
-
-1:
-        /*nop
-        set 0x701 , %g1 // XCE=1, DCE=0, ICE=1 ,MMU_EN=1, BootMode=0, NoFault=0
+        nop
+        set 0x201 , %g1 // XCE=1, DCE=0, ICE=1 ,MMU_EN=1, BootMode=0, NoFault=0
         sta    %g1, [%g0] ASI_M_MMUREGS // Enable instruction cache
-        nop*/
         nop
-        
+        nop
+
+1:
         /* Finally, turn on traps so that we can call c-code. */
         rd	%psr, %g3
+        wr	%g3, 0x0, %psr
+        WRITE_PAUSE
+
         wr	%g3, PSR_ET, %psr
         WRITE_PAUSE
 
